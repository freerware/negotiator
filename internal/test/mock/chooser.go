// Code generated by MockGen. DO NOT EDIT.
// Source: representation/chooser.go

// Package mock is a generated GoMock package.
package mock

import (
	representation "github.com/freerware/negotiator/representation"
	gomock "github.com/golang/mock/gomock"
	http "net/http"
	reflect "reflect"
)

// Chooser is a mock of Chooser interface
type Chooser struct {
	ctrl     *gomock.Controller
	recorder *ChooserMockRecorder
}

// ChooserMockRecorder is the mock recorder for Chooser
type ChooserMockRecorder struct {
	mock *Chooser
}

// NewChooser creates a new mock instance
func NewChooser(ctrl *gomock.Controller) *Chooser {
	mock := &Chooser{ctrl: ctrl}
	mock.recorder = &ChooserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Chooser) EXPECT() *ChooserMockRecorder {
	return m.recorder
}

// Choose mocks base method
func (m *Chooser) Choose(arg0 *http.Request, arg1 ...representation.Representation) (representation.Representation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Choose", varargs...)
	ret0, _ := ret[0].(representation.Representation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Choose indicates an expected call of Choose
func (mr *ChooserMockRecorder) Choose(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Choose", reflect.TypeOf((*Chooser)(nil).Choose), varargs...)
}
